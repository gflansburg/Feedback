<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Feedback Settings</value>
  </data>
  <data name="lblThankYou.Help" xml:space="preserve">
    <value>Text for the confirmation dialog.</value>
  </data>
  <data name="lblThankYou.Text" xml:space="preserve">
    <value>Confirmation Message</value>
  </data>
  <data name="lblTitle.Help" xml:space="preserve">
    <value>Feedback Button Text</value>
  </data>
  <data name="lblTitle.Text" xml:space="preserve">
    <value>Send Feedback</value>
  </data>
  <data name="EnableRecaptcha.Help" xml:space="preserve">
    <value>Select this box to enable Google reCaptcha</value>
  </data>
  <data name="EnableRecaptcha.Text" xml:space="preserve">
    <value>Enable Google reCaptcha</value>
  </data>
  <data name="PrivateKey.Help" xml:space="preserve">
    <value>Private Key provided by Google reCapthca</value>
  </data>
  <data name="PrivateKey.Text" xml:space="preserve">
    <value>Private Key</value>
  </data>
  <data name="PublicKey.Help" xml:space="preserve">
    <value>Public Key Provided from Google reCaptcha</value>
  </data>
  <data name="PublicKey.Text" xml:space="preserve">
    <value>Public Key</value>
  </data>
  <data name="RecaptchaTheme.Text" xml:space="preserve">
    <value>reCaptchTheme</value>
  </data>
  <data name="blankrecaptcha.Help" xml:space="preserve">
    <value>Error Message when the user does not enter a capture response</value>
  </data>
  <data name="blankrecaptcha.Text" xml:space="preserve">
    <value>Blank Captcha</value>
  </data>
  <data name="incorrectcaptcha.Help" xml:space="preserve">
    <value>Error message when the user provides an incorrect captcha response.</value>
  </data>
  <data name="incorrectcaptcha.Text" xml:space="preserve">
    <value>Incorrect Captcha</value>
  </data>
  <data name="RecaptchaTheme.Help" xml:space="preserve">
    <value>Color theme of the reCaptcha</value>
  </data>
  <data name="lblSendTo.Help" xml:space="preserve">
    <value>Email address of the person you want to send the feedback to.</value>
  </data>
  <data name="lblSendTo.Text" xml:space="preserve">
    <value>Admin Email Address</value>
  </data>
  <data name="SMTPServer.Help" xml:space="preserve">
    <value>Add your smtp server eg. smtp.yourdomain.com</value>
  </data>
  <data name="SMTPServer.Text" xml:space="preserve">
    <value>SMTP Server </value>
  </data>
  <data name="smtpuser.Help" xml:space="preserve">
    <value>SMTP Username eg. someone@somewhere.com</value>
  </data>
  <data name="smtpuser.Text" xml:space="preserve">
    <value>SMTP Username</value>
  </data>
  <data name="smtppassword.Help" xml:space="preserve">
    <value>Specify your SMTP Password</value>
  </data>
  <data name="smtppassword.Text" xml:space="preserve">
    <value>SMTP Password</value>
  </data>
  <data name="smtpdomain.Help" xml:space="preserve">
    <value>Specify your SMTP Domain</value>
  </data>
  <data name="smtpdomain.Text" xml:space="preserve">
    <value>SMTP Domain</value>
  </data>
  <data name="smtpssl.Help" xml:space="preserve">
    <value>Specify if SMTP requires SSL</value>
  </data>
  <data name="smtpssl.Text" xml:space="preserve">
    <value>SMTP SSL</value>
  </data>
  <data name="smtpport.Help" xml:space="preserve">
    <value>SMTP default port should be 25. In some cases ISP's might block this port, you could use 587 as an alternative port. If both port numbers do not work, please call your hosting provider or ISP.</value>
  </data>
  <data name="smtpport.Text" xml:space="preserve">
    <value>SMTP Port</value>
  </data>
  <data name="testemail.Help" xml:space="preserve">
    <value>This email address is not used by the module, its only used to send a test email, to check if SMTP authentication is working</value>
  </data>
  <data name="testemail.Text" xml:space="preserve">
    <value>Send test mail from</value>
  </data>
  <data name="TestSettings.Text" xml:space="preserve">
    <value>Test SMTP</value>
  </data>
  <data name="usednnsmtp.Help" xml:space="preserve">
    <value>This will overide your custom SMTP Settings and use DotNetNuke SMTP values </value>
  </data>
  <data name="usednnsmtp.Text" xml:space="preserve">
    <value>Use DNN SMTP Settings</value>
  </data>
</root>